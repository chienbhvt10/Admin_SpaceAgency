stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build:
  stage: build
  cache:
    policy: pull-push
    key: app_cache
    paths:
    - node_modules/
    - .next/
    - .env
    - yarn.lock
  script:
    - node -v
    - yarn -v
    - echo $CI_JOB_ID    
    - cat "$DEV_ENV" > ".env"
    - echo "Installing dependence..."
    - yarn    
    - echo "Installing dependence complete."  
    - echo "Start build project..."
    - cat "$DEV_ENV" > "$(pwd)/.env"
    - yarn build:prod
    - echo "Build project complete."
  except:
    - staging
    - master
    
build-staging:
  stage: build
  cache:
    policy: pull-push
    key: app_cache_stg
    paths:
    - node_modules/
    - .next/
    - yarn.lock
  script:
    - node -v
    - yarn -v
    - echo $CI_JOB_ID    
    - cat "$STAG_ENV" > ".env"
    - echo "Installing dependence..."
    - yarn    
    - echo "Installing dependence complete."  
    - echo "Start build project..."
    - cat "$STAG_ENV" > "$(pwd)/.env"
    - yarn build:prod
    - echo "Build project complete."
  only:
    - staging

deploy:      # This job runs in the deploy stage.
  tags: [deploy]
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  before_script:
  - "curl -X POST -H 'Content-type: application/json' --data '{\"text\":\"<!channel> '\"<https://gitlab.com//$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID|#$CI_JOB_ID> $CI_PROJECT_NAMESPACE - $CI_PROJECT_NAME - $CI_COMMIT_BRANCH\"' Deploying...\"}' $SLACK_WEB_HOOK"
  script:    
    - whoami
    - echo "FAIL" > .job_status
    - echo "Deploying application..."
    - cat "$DEV_ENV" > ".env"
    - echo $SERVER_USER@$SERVER_IP:$SERVER_PORT
    - scp -o StrictHostKeyChecking=no .env $SERVER_USER@$SERVER_IP:$SRC_PATH
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP -p $SERVER_PORT "cd $SRC_PATH && git pull && docker-compose up -d --build --remove-orphans"
    - echo "Application successfully deployed."
    - echo "SUCCESS" > .job_status
  after_script:
    - cat .job_status
    - JOB_STATUS=`cat .job_status`
    - "curl -X POST -H 'Content-type: application/json' --data '{\"text\":\"<!channel> '\"<https://gitlab.com//$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID|#$CI_JOB_ID> $CI_PROJECT_NAMESPACE - $CI_PROJECT_NAME - $CI_COMMIT_BRANCH\"' Deploy Complete! Status: '\"$JOB_STATUS\"'\"}' $SLACK_WEB_HOOK"
  only:
    - develop

deploy-stag-job:      # This job runs in the deploy stage.
  tags: [deploy]
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  before_script:
  - "curl -X POST -H 'Content-type: application/json' --data '{\"text\":\"<!channel> '\"<https://gitlab.com/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID|#$CI_JOB_ID> $CI_PROJECT_NAMESPACE - $CI_PROJECT_NAME - $CI_COMMIT_BRANCH\"' Staging Deploying...\"}' $SLACK_WEB_HOOK"
  script:    
    - whoami
    - echo "FAIL" > .job_status
    - echo "Deploying application..."
    - cat "$STAG_ENV" > ".env"
    - scp -o StrictHostKeyChecking=no .env $STAG_SERVER_USER@$STAG_SERVER_IP:$SRC_PATH
    - ssh -o StrictHostKeyChecking=no $STAG_SERVER_USER@$STAG_SERVER_IP "cd $SRC_PATH && git pull && docker-compose up -d --build --remove-orphans"
    - echo "Application successfully deployed."
    - echo "SUCCESS" > .job_status
  after_script:
    - cat .job_status
    - JOB_STATUS=`cat .job_status`
    - "curl -X POST -H 'Content-type: application/json' --data '{\"text\":\"<!channel> '\"<https://gitlab.com//$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID|#$CI_JOB_ID> $CI_PROJECT_NAMESPACE - $CI_PROJECT_NAME - $CI_COMMIT_BRANCH\n$CI_COMMIT_SHORT_SHA - $CI_COMMIT_MESSAGE\"' \nDeploy Staging Complete! Status: '\"$JOB_STATUS\"'\"}' $SLACK_WEB_HOOK"
  only:
    - staging

deploy-prod-job:      # This job runs in the deploy stage.
  tags: [deploy]
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  before_script:
  - "curl -X POST -H 'Content-type: application/json' --data '{\"text\":\"<!channel> '\"<https://gitlab.com/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID|#$CI_JOB_ID> $CI_PROJECT_NAMESPACE - $CI_PROJECT_NAME - $CI_COMMIT_BRANCH\"' Production Deploying...\"}' $SLACK_WEB_HOOK"
  script:    
    - whoami
    - echo "FAIL" > .job_status
    - echo "Deploying application..."
    - cat "$PROD_ENV" > ".env"
    - scp -o StrictHostKeyChecking=no .env $PROD_SERVER_USER@$PROD_SERVER_IP:deploy/admin
    - ssh -o StrictHostKeyChecking=no $PROD_SERVER_USER@$PROD_SERVER_IP -p "cd $SRC_PATH && git pull && docker-compose up -d --build --remove-orphans"
    - echo "Application successfully deployed."
    - echo "SUCCESS" > .job_status
  after_script:
    - cat .job_status
    - JOB_STATUS=`cat .job_status`
    - "curl -X POST -H 'Content-type: application/json' --data '{\"text\":\"<!channel> '\"<https://gitlab.com//$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID|#$CI_JOB_ID> $CI_PROJECT_NAMESPACE - $CI_PROJECT_NAME - $CI_COMMIT_BRANCH\n$CI_COMMIT_SHORT_SHA - $CI_COMMIT_MESSAGE\"' \nDeploy Production Complete! Status: '\"$JOB_STATUS\"'\"}' $SLACK_WEB_HOOK"
  only:
    - master